{"version":3,"sources":["../../random-graph-generator/index.js","GraphViz.js","App.js","serviceWorker.js","index.js"],"names":["Graph","require","module","exports","nodes","maxWidth","edgeProbability","Math","floor","Error","Number","graph","degree","node","indegree","outdegree","Array","isArray","length","existingNodesCount","addNode","edgeCount","i","random","addEdge","config","nodeHighlightBehavior","color","size","highlightStrokeColor","link","highlightColor","regenerate","data","generate","fill","map","_","toString","serialize","useState","setNodes","type","style","position","top","right","fontSize","padding","onClick","console","log","JSON","stringify","id","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0HAAMA,EAAQC,EAAQ,IAsCtBC,EAAOC,QA9BP,SAA6BC,EAA7B,GAAmE,IAA7BC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,gBAC5C,IAAKC,KAAKC,MAAMH,GAAW,MAAM,IAAII,MAAM,yCAC3C,IAAKH,GAAmBI,OAAOJ,IAAoB,EAAG,MAAM,IAAIG,MAAM,8CAEtE,IAAME,EAAQX,IAId,GAFAW,EAAMC,OAAS,SAAAC,GAAI,OAAIF,EAAMG,SAASD,GAAQF,EAAMI,UAAUF,KAEzDT,IAAUY,MAAMC,QAAQb,KAAWA,EAAMc,OAAQ,OAAOP,EAE7D,IAV+D,EAU3DQ,EAAqB,EAVsC,IAW5Cf,GAX4C,IAW/D,2BAA0B,KAAfS,EAAe,QACtBF,EAAMS,QAAQP,GAEd,IADA,IAAIQ,EAAY,EACc,IAAvBV,EAAMC,OAAOC,IAAeM,GAC/B,IAAK,IAAIG,EAAI,EAAGA,EAAIH,EAAoBG,IACpC,GAAIf,KAAKgB,SAAWjB,EAAiB,CACjC,GAAIK,EAAMC,OAAOR,EAAMkB,KAAOjB,EAAU,SAGxC,GAFAM,EAAMa,QAAQX,EAAMT,EAAMkB,MAC1BD,EACgBhB,EAAU,MAItCc,KAxB2D,8BA2B/D,OAAOR,I,iNC/BLc,EAAS,CACbC,uBAAuB,EACvBb,KAAM,CACJc,MAAO,aACPC,KAAM,IACNC,qBAAsB,OAExBC,KAAM,CACJC,eAAgB,QAIdC,EAAa,WACjB,IAAMC,EAAOC,IACX,IAAIlB,MAAM,IAAImB,KAAK,MAAMC,KAAI,SAACC,EAAGf,GAAJ,OAAUA,EAAEgB,cACzC,CACEjC,SAAU,EACVC,gBAAiB,KAEnBiC,YAUF,OARkB,eACbN,EADa,CAEhB7B,MAAO6B,EAAK7B,MAAMgC,KAAI,SAACvB,EAAMS,GAAP,sBACjBT,EADiB,GAEhBN,KAAKgB,SAAW,GAAM,CAAEI,MAAO,SAAY,UAStC,aAAO,IAAD,EACOa,mBAASR,KADhB,mBACZ5B,EADY,KACLqC,EADK,KAanB,OACE,oCACE,4BACEC,KAAK,SACLC,MAAO,CAAEC,SAAU,QAASC,IAAK,OAAQC,MAAO,OAAQC,SAAU,OAAQC,QAAS,WACnFC,QAAS,kBAAMR,EAAST,OAH1B,sBAMA,4BACEU,KAAK,SACLC,MAAO,CAAEC,SAAU,QAASC,IAAK,OAAQC,MAAO,OAAQC,SAAU,OAAQC,QAAS,WACnFC,QArBiB,WACrBC,QAAQC,IACNC,KAAKC,UACHjD,EACA,KACA,MAaF,qBAMA,kBAAC,QAAD,CACEkD,GAAG,WACHrB,KAAM7B,EACNqB,OAAQA,MCtDD8B,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,8BACE,kBAAC,EAAD,SCIYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.c8b831bd.chunk.js","sourcesContent":["const Graph = require('graph-data-structure');\n\n/**\n * generates a graph of supplied nodes\n * \n * @param {Array} nodes An array of data to be nodes in the generated graph\n * @param {{ edgeProbability: number, maxWidth: number }} options \n */\nfunction generateRandomGraph(nodes, { maxWidth, edgeProbability }) {\n    if (!Math.floor(maxWidth)) throw new Error('[maxWidth] must be a positive integer');\n    if (!edgeProbability || Number(edgeProbability) <= 0) throw new Error('[edgeProbability] must be a positive float');\n\n    const graph = Graph();\n\n    graph.degree = node => graph.indegree(node) + graph.outdegree(node);\n\n    if (!nodes || !Array.isArray(nodes) || !nodes.length) return graph;\n\n    let existingNodesCount = 0;\n    for (const node of nodes) {\n        graph.addNode(node);\n        let edgeCount = 0;\n        while (graph.degree(node) === 0 && existingNodesCount) {\n            for (let i = 0; i < existingNodesCount; i++) {\n                if (Math.random() < edgeProbability) {\n                    if (graph.degree(nodes[i]) >= maxWidth) continue;\n                    graph.addEdge(node, nodes[i]);\n                    edgeCount++;\n                    if (edgeCount > maxWidth) break;\n                }\n            }\n        }\n        existingNodesCount++;\n    }\n\n    return graph;\n}\n\nmodule.exports = generateRandomGraph;","import React, { useState } from \"react\";\nimport { Graph } from \"react-d3-graph\";\nimport generate from \"random-graph-generator\";\n\nconst config = {\n  nodeHighlightBehavior: true,\n  node: {\n    color: \"lightgreen\",\n    size: 120,\n    highlightStrokeColor: \"red\",\n  },\n  link: {\n    highlightColor: \"red\",\n  },\n};\n\nconst regenerate = () => {\n  const data = generate(\n    new Array(50).fill(null).map((_, i) => i.toString()),\n    {\n      maxWidth: 5,\n      edgeProbability: 0.3,\n    }\n  ).serialize();\n  \n  const refinedNodes = {\n    ...data,\n    nodes: data.nodes.map((node, i) => ({\n      ...node,\n      ...(Math.random() < 0.1 ? { color: \"black\" } : {}),\n    })),\n  };\n\n  return refinedNodes;\n}\n\n\n\nexport default () => {\n  const [nodes, setNodes] = useState(regenerate());\n\n  const exportGraphson = () => {\n    console.log(\n      JSON.stringify(\n        nodes,\n        null,\n        2\n      )\n    );\n  };\n\n  return (\n    <>\n      <button \n        type=\"button\" \n        style={{ position: 'fixed', top: '10px', right: '10px', fontSize: '20px', padding: '0.75rem' }}\n        onClick={() => setNodes(regenerate())}>\n        Generate new Graph\n      </button>\n      <button \n        type=\"button\" \n        style={{ position: 'fixed', top: '70px', right: '10px', fontSize: '20px', padding: '0.75rem' }}\n        onClick={exportGraphson}>\n        Export to Console\n      </button>\n      <Graph\n        id=\"graph-id\" // id is mandatory, if no id is defined rd3g will throw an error\n        data={nodes}\n        config={config}\n      />\n    </>\n  );\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Graph from \"./GraphViz\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main>\n        <Graph />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}